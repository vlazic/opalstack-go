/*
Opalstack API

 ## The Opalstack JSON REST API  ### Authorization This API uses an **Authorization** header of the form: `\"Authorization: Token 1111111111111111111111111111111111111111\"`, where **1111111111111111111111111111111111111111** represents an API token created at https://my.opalstack.com/tokens/.  The typical format of an API request looks like the following: ``` GET request:     curl -s -H \"Authorization: Token 1111111111111111111111111111111111111111\" \"https://my.opalstack.com/api/v1/site/list/\" | jq .  POST request:     curl -s -H \"Content-Type: application/json\" -H \"Authorization: Token 1111111111111111111111111111111111111111\" \\             -X POST -d '[{\"id\": \"(site UUID)\", \"redirect\": true, ...}]' \"https://my.opalstack.com/api/v1/site/update/\" | jq . ``` (Further examples will omit **headers** and **jq** for the sake of clarity)  You can also authorize requests on our API Documentation page (https://my.opalstack.com/api/v1/doc/) in order to facilitate development. To do so, click the \"**Authorize**\" button on the right side of the page and enter \"**Token 1111111111111111111111111111111111111111**\" in the **Value** field within. Afterword, you will be able to perform requests directly from the documentation page. Be sure to logout when finished.  ### Embedding The Opalstack API supports _embedding_. This allows you to nest child API objects in a single GET request. For example, consider the following GET request performed with **curl**: ``` Request:     curl \"https://my.opalstack.com/api/v1/osuser/list/\"  Response:     [       {         \"id\": \"01010101-0202-0303-0404-050505050505\",         \"state\": \"READY\",         \"ready\": true,         \"name\": \"the_osuser_name\",         \"server\": \"11111111-1212-1313-1414-151515151515\"       }     ] ```  Suppose then that we would like additional information about the **server**. We _could_ proceed to query the **server** UUID (**11111111-1212-1313-1414-151515151515**) at the `/server/read/{uuid}` endpoint, like this: ``` Request:     curl \"https://my.opalstack.com/api/v1/server/read/11111111-1212-1313-1414-151515151515\"  Response:     {       \"id\": \"11111111-1212-1313-1414-151515151515\",       \"hostname\": \"vpsNNN.opalstack.com\"     } ```  However, we could have instead choosen to specify `?embed=server` as a query parameter to the original GET request. This will cause objects to be _embedded_ in the response directly: ``` Request:     curl \"https://my.opalstack.com/api/v1/osuser/list/?embed=server\"  Response:     [       {         \"id\": \"01010101-0202-0303-0404-050505050505\",         \"state\": \"READY\",         \"ready\": true,         \"name\": \"the_osuser_name\",         \"server\": {           \"id\": \"11111111-1212-1313-1414-151515151515\",           \"hostname\": \"vpsNNN.opalstack.com\"         }       }     ] ``` Here, the **server** field has been be populated with the full object instead of just a UUID.  The **embed** query parameter accepts multiple (comma-separated) fields to embed. For example: ``` curl \"https://my.opalstack.com/api/v1/account/info/?embed=web_servers,imap_servers,smtp_servers\" ``` 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package OpalStack

import (
	"encoding/json"
	"time"
)

// checks if the AccountResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountResponse{}

// AccountResponse struct for AccountResponse
type AccountResponse struct {
	Id string `json:"id"`
	State StateEnum `json:"state"`
	Ready bool `json:"ready"`
	Email string `json:"email"`
	WebServers []string `json:"web_servers"`
	ImapServers []string `json:"imap_servers"`
	SmtpServers []string `json:"smtp_servers"`
	Ips []string `json:"ips"`
	CreatedAt time.Time `json:"created_at"`
	PaymentProcessor AccountResponsePaymentProcessorEnum `json:"payment_processor"`
	UsageData UsageDataResponse `json:"usage_data"`
}

// NewAccountResponse instantiates a new AccountResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountResponse(id string, state StateEnum, ready bool, email string, webServers []string, imapServers []string, smtpServers []string, ips []string, createdAt time.Time, paymentProcessor AccountResponsePaymentProcessorEnum, usageData UsageDataResponse) *AccountResponse {
	this := AccountResponse{}
	this.Id = id
	this.State = state
	this.Ready = ready
	this.Email = email
	this.WebServers = webServers
	this.ImapServers = imapServers
	this.SmtpServers = smtpServers
	this.Ips = ips
	this.CreatedAt = createdAt
	this.PaymentProcessor = paymentProcessor
	this.UsageData = usageData
	return &this
}

// NewAccountResponseWithDefaults instantiates a new AccountResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountResponseWithDefaults() *AccountResponse {
	this := AccountResponse{}
	return &this
}

// GetId returns the Id field value
func (o *AccountResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *AccountResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *AccountResponse) SetId(v string) {
	o.Id = v
}

// GetState returns the State field value
func (o *AccountResponse) GetState() StateEnum {
	if o == nil {
		var ret StateEnum
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *AccountResponse) GetStateOk() (*StateEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *AccountResponse) SetState(v StateEnum) {
	o.State = v
}

// GetReady returns the Ready field value
func (o *AccountResponse) GetReady() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Ready
}

// GetReadyOk returns a tuple with the Ready field value
// and a boolean to check if the value has been set.
func (o *AccountResponse) GetReadyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ready, true
}

// SetReady sets field value
func (o *AccountResponse) SetReady(v bool) {
	o.Ready = v
}

// GetEmail returns the Email field value
func (o *AccountResponse) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *AccountResponse) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *AccountResponse) SetEmail(v string) {
	o.Email = v
}

// GetWebServers returns the WebServers field value
func (o *AccountResponse) GetWebServers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.WebServers
}

// GetWebServersOk returns a tuple with the WebServers field value
// and a boolean to check if the value has been set.
func (o *AccountResponse) GetWebServersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WebServers, true
}

// SetWebServers sets field value
func (o *AccountResponse) SetWebServers(v []string) {
	o.WebServers = v
}

// GetImapServers returns the ImapServers field value
func (o *AccountResponse) GetImapServers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.ImapServers
}

// GetImapServersOk returns a tuple with the ImapServers field value
// and a boolean to check if the value has been set.
func (o *AccountResponse) GetImapServersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImapServers, true
}

// SetImapServers sets field value
func (o *AccountResponse) SetImapServers(v []string) {
	o.ImapServers = v
}

// GetSmtpServers returns the SmtpServers field value
func (o *AccountResponse) GetSmtpServers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SmtpServers
}

// GetSmtpServersOk returns a tuple with the SmtpServers field value
// and a boolean to check if the value has been set.
func (o *AccountResponse) GetSmtpServersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SmtpServers, true
}

// SetSmtpServers sets field value
func (o *AccountResponse) SetSmtpServers(v []string) {
	o.SmtpServers = v
}

// GetIps returns the Ips field value
func (o *AccountResponse) GetIps() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Ips
}

// GetIpsOk returns a tuple with the Ips field value
// and a boolean to check if the value has been set.
func (o *AccountResponse) GetIpsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ips, true
}

// SetIps sets field value
func (o *AccountResponse) SetIps(v []string) {
	o.Ips = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *AccountResponse) GetCreatedAt() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *AccountResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *AccountResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = v
}

// GetPaymentProcessor returns the PaymentProcessor field value
func (o *AccountResponse) GetPaymentProcessor() AccountResponsePaymentProcessorEnum {
	if o == nil {
		var ret AccountResponsePaymentProcessorEnum
		return ret
	}

	return o.PaymentProcessor
}

// GetPaymentProcessorOk returns a tuple with the PaymentProcessor field value
// and a boolean to check if the value has been set.
func (o *AccountResponse) GetPaymentProcessorOk() (*AccountResponsePaymentProcessorEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaymentProcessor, true
}

// SetPaymentProcessor sets field value
func (o *AccountResponse) SetPaymentProcessor(v AccountResponsePaymentProcessorEnum) {
	o.PaymentProcessor = v
}

// GetUsageData returns the UsageData field value
func (o *AccountResponse) GetUsageData() UsageDataResponse {
	if o == nil {
		var ret UsageDataResponse
		return ret
	}

	return o.UsageData
}

// GetUsageDataOk returns a tuple with the UsageData field value
// and a boolean to check if the value has been set.
func (o *AccountResponse) GetUsageDataOk() (*UsageDataResponse, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UsageData, true
}

// SetUsageData sets field value
func (o *AccountResponse) SetUsageData(v UsageDataResponse) {
	o.UsageData = v
}

func (o AccountResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["state"] = o.State
	toSerialize["ready"] = o.Ready
	toSerialize["email"] = o.Email
	toSerialize["web_servers"] = o.WebServers
	toSerialize["imap_servers"] = o.ImapServers
	toSerialize["smtp_servers"] = o.SmtpServers
	toSerialize["ips"] = o.Ips
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["payment_processor"] = o.PaymentProcessor
	toSerialize["usage_data"] = o.UsageData
	return toSerialize, nil
}

type NullableAccountResponse struct {
	value *AccountResponse
	isSet bool
}

func (v NullableAccountResponse) Get() *AccountResponse {
	return v.value
}

func (v *NullableAccountResponse) Set(val *AccountResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountResponse(val *AccountResponse) *NullableAccountResponse {
	return &NullableAccountResponse{value: val, isSet: true}
}

func (v NullableAccountResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


