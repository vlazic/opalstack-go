/*
Opalstack API

 ## The Opalstack JSON REST API  ### Authorization This API uses an **Authorization** header of the form: `\"Authorization: Token 1111111111111111111111111111111111111111\"`, where **1111111111111111111111111111111111111111** represents an API token created at https://my.opalstack.com/tokens/.  The typical format of an API request looks like the following: ``` GET request:     curl -s -H \"Authorization: Token 1111111111111111111111111111111111111111\" \"https://my.opalstack.com/api/v1/site/list/\" | jq .  POST request:     curl -s -H \"Content-Type: application/json\" -H \"Authorization: Token 1111111111111111111111111111111111111111\" \\             -X POST -d '[{\"id\": \"(site UUID)\", \"redirect\": true, ...}]' \"https://my.opalstack.com/api/v1/site/update/\" | jq . ``` (Further examples will omit **headers** and **jq** for the sake of clarity)  You can also authorize requests on our API Documentation page (https://my.opalstack.com/api/v1/doc/) in order to facilitate development. To do so, click the \"**Authorize**\" button on the right side of the page and enter \"**Token 1111111111111111111111111111111111111111**\" in the **Value** field within. Afterword, you will be able to perform requests directly from the documentation page. Be sure to logout when finished.  ### Embedding The Opalstack API supports _embedding_. This allows you to nest child API objects in a single GET request. For example, consider the following GET request performed with **curl**: ``` Request:     curl \"https://my.opalstack.com/api/v1/osuser/list/\"  Response:     [       {         \"id\": \"01010101-0202-0303-0404-050505050505\",         \"state\": \"READY\",         \"ready\": true,         \"name\": \"the_osuser_name\",         \"server\": \"11111111-1212-1313-1414-151515151515\"       }     ] ```  Suppose then that we would like additional information about the **server**. We _could_ proceed to query the **server** UUID (**11111111-1212-1313-1414-151515151515**) at the `/server/read/{uuid}` endpoint, like this: ``` Request:     curl \"https://my.opalstack.com/api/v1/server/read/11111111-1212-1313-1414-151515151515\"  Response:     {       \"id\": \"11111111-1212-1313-1414-151515151515\",       \"hostname\": \"vpsNNN.opalstack.com\"     } ```  However, we could have instead choosen to specify `?embed=server` as a query parameter to the original GET request. This will cause objects to be _embedded_ in the response directly: ``` Request:     curl \"https://my.opalstack.com/api/v1/osuser/list/?embed=server\"  Response:     [       {         \"id\": \"01010101-0202-0303-0404-050505050505\",         \"state\": \"READY\",         \"ready\": true,         \"name\": \"the_osuser_name\",         \"server\": {           \"id\": \"11111111-1212-1313-1414-151515151515\",           \"hostname\": \"vpsNNN.opalstack.com\"         }       }     ] ``` Here, the **server** field has been be populated with the full object instead of just a UUID.  The **embed** query parameter accepts multiple (comma-separated) fields to embed. For example: ``` curl \"https://my.opalstack.com/api/v1/account/info/?embed=web_servers,imap_servers,smtp_servers\" ``` 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package OpalStack

import (
	"encoding/json"
)

// checks if the SiteResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SiteResponse{}

// SiteResponse struct for SiteResponse
type SiteResponse struct {
	Id string `json:"id"`
	State StateEnum `json:"state"`
	Ready bool `json:"ready"`
	Name string `json:"name"`
	Server string `json:"server"`
	Ip4 string `json:"ip4"`
	Ip6 string `json:"ip6"`
	Disabled bool `json:"disabled"`
	Domains []string `json:"domains"`
	Routes []RouteResponse `json:"routes"`
	GenerateLe bool `json:"generate_le"`
	Cert string `json:"cert"`
	Redirect bool `json:"redirect"`
	LeHttpChallengeTokens []string `json:"le_http_challenge_tokens"`
}

// NewSiteResponse instantiates a new SiteResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteResponse(id string, state StateEnum, ready bool, name string, server string, ip4 string, ip6 string, disabled bool, domains []string, routes []RouteResponse, generateLe bool, cert string, redirect bool, leHttpChallengeTokens []string) *SiteResponse {
	this := SiteResponse{}
	this.Id = id
	this.State = state
	this.Ready = ready
	this.Name = name
	this.Server = server
	this.Ip4 = ip4
	this.Ip6 = ip6
	this.Disabled = disabled
	this.Domains = domains
	this.Routes = routes
	this.GenerateLe = generateLe
	this.Cert = cert
	this.Redirect = redirect
	this.LeHttpChallengeTokens = leHttpChallengeTokens
	return &this
}

// NewSiteResponseWithDefaults instantiates a new SiteResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteResponseWithDefaults() *SiteResponse {
	this := SiteResponse{}
	return &this
}

// GetId returns the Id field value
func (o *SiteResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *SiteResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *SiteResponse) SetId(v string) {
	o.Id = v
}

// GetState returns the State field value
func (o *SiteResponse) GetState() StateEnum {
	if o == nil {
		var ret StateEnum
		return ret
	}

	return o.State
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
func (o *SiteResponse) GetStateOk() (*StateEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.State, true
}

// SetState sets field value
func (o *SiteResponse) SetState(v StateEnum) {
	o.State = v
}

// GetReady returns the Ready field value
func (o *SiteResponse) GetReady() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Ready
}

// GetReadyOk returns a tuple with the Ready field value
// and a boolean to check if the value has been set.
func (o *SiteResponse) GetReadyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ready, true
}

// SetReady sets field value
func (o *SiteResponse) SetReady(v bool) {
	o.Ready = v
}

// GetName returns the Name field value
func (o *SiteResponse) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SiteResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SiteResponse) SetName(v string) {
	o.Name = v
}

// GetServer returns the Server field value
func (o *SiteResponse) GetServer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Server
}

// GetServerOk returns a tuple with the Server field value
// and a boolean to check if the value has been set.
func (o *SiteResponse) GetServerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Server, true
}

// SetServer sets field value
func (o *SiteResponse) SetServer(v string) {
	o.Server = v
}

// GetIp4 returns the Ip4 field value
func (o *SiteResponse) GetIp4() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ip4
}

// GetIp4Ok returns a tuple with the Ip4 field value
// and a boolean to check if the value has been set.
func (o *SiteResponse) GetIp4Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ip4, true
}

// SetIp4 sets field value
func (o *SiteResponse) SetIp4(v string) {
	o.Ip4 = v
}

// GetIp6 returns the Ip6 field value
func (o *SiteResponse) GetIp6() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ip6
}

// GetIp6Ok returns a tuple with the Ip6 field value
// and a boolean to check if the value has been set.
func (o *SiteResponse) GetIp6Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ip6, true
}

// SetIp6 sets field value
func (o *SiteResponse) SetIp6(v string) {
	o.Ip6 = v
}

// GetDisabled returns the Disabled field value
func (o *SiteResponse) GetDisabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value
// and a boolean to check if the value has been set.
func (o *SiteResponse) GetDisabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Disabled, true
}

// SetDisabled sets field value
func (o *SiteResponse) SetDisabled(v bool) {
	o.Disabled = v
}

// GetDomains returns the Domains field value
func (o *SiteResponse) GetDomains() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Domains
}

// GetDomainsOk returns a tuple with the Domains field value
// and a boolean to check if the value has been set.
func (o *SiteResponse) GetDomainsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Domains, true
}

// SetDomains sets field value
func (o *SiteResponse) SetDomains(v []string) {
	o.Domains = v
}

// GetRoutes returns the Routes field value
func (o *SiteResponse) GetRoutes() []RouteResponse {
	if o == nil {
		var ret []RouteResponse
		return ret
	}

	return o.Routes
}

// GetRoutesOk returns a tuple with the Routes field value
// and a boolean to check if the value has been set.
func (o *SiteResponse) GetRoutesOk() ([]RouteResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Routes, true
}

// SetRoutes sets field value
func (o *SiteResponse) SetRoutes(v []RouteResponse) {
	o.Routes = v
}

// GetGenerateLe returns the GenerateLe field value
func (o *SiteResponse) GetGenerateLe() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.GenerateLe
}

// GetGenerateLeOk returns a tuple with the GenerateLe field value
// and a boolean to check if the value has been set.
func (o *SiteResponse) GetGenerateLeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.GenerateLe, true
}

// SetGenerateLe sets field value
func (o *SiteResponse) SetGenerateLe(v bool) {
	o.GenerateLe = v
}

// GetCert returns the Cert field value
func (o *SiteResponse) GetCert() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Cert
}

// GetCertOk returns a tuple with the Cert field value
// and a boolean to check if the value has been set.
func (o *SiteResponse) GetCertOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Cert, true
}

// SetCert sets field value
func (o *SiteResponse) SetCert(v string) {
	o.Cert = v
}

// GetRedirect returns the Redirect field value
func (o *SiteResponse) GetRedirect() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Redirect
}

// GetRedirectOk returns a tuple with the Redirect field value
// and a boolean to check if the value has been set.
func (o *SiteResponse) GetRedirectOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Redirect, true
}

// SetRedirect sets field value
func (o *SiteResponse) SetRedirect(v bool) {
	o.Redirect = v
}

// GetLeHttpChallengeTokens returns the LeHttpChallengeTokens field value
func (o *SiteResponse) GetLeHttpChallengeTokens() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.LeHttpChallengeTokens
}

// GetLeHttpChallengeTokensOk returns a tuple with the LeHttpChallengeTokens field value
// and a boolean to check if the value has been set.
func (o *SiteResponse) GetLeHttpChallengeTokensOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LeHttpChallengeTokens, true
}

// SetLeHttpChallengeTokens sets field value
func (o *SiteResponse) SetLeHttpChallengeTokens(v []string) {
	o.LeHttpChallengeTokens = v
}

func (o SiteResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SiteResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["state"] = o.State
	toSerialize["ready"] = o.Ready
	toSerialize["name"] = o.Name
	toSerialize["server"] = o.Server
	toSerialize["ip4"] = o.Ip4
	toSerialize["ip6"] = o.Ip6
	toSerialize["disabled"] = o.Disabled
	toSerialize["domains"] = o.Domains
	toSerialize["routes"] = o.Routes
	toSerialize["generate_le"] = o.GenerateLe
	toSerialize["cert"] = o.Cert
	toSerialize["redirect"] = o.Redirect
	toSerialize["le_http_challenge_tokens"] = o.LeHttpChallengeTokens
	return toSerialize, nil
}

type NullableSiteResponse struct {
	value *SiteResponse
	isSet bool
}

func (v NullableSiteResponse) Get() *SiteResponse {
	return v.value
}

func (v *NullableSiteResponse) Set(val *SiteResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteResponse(val *SiteResponse) *NullableSiteResponse {
	return &NullableSiteResponse{value: val, isSet: true}
}

func (v NullableSiteResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


