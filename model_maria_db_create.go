/*
Opalstack API

 ## The Opalstack JSON REST API  ### Authorization This API uses an **Authorization** header of the form: `\"Authorization: Token 1111111111111111111111111111111111111111\"`, where **1111111111111111111111111111111111111111** represents an API token created at https://my.opalstack.com/tokens/.  The typical format of an API request looks like the following: ``` GET request:     curl -s -H \"Authorization: Token 1111111111111111111111111111111111111111\" \"https://my.opalstack.com/api/v1/site/list/\" | jq .  POST request:     curl -s -H \"Content-Type: application/json\" -H \"Authorization: Token 1111111111111111111111111111111111111111\" \\             -X POST -d '[{\"id\": \"(site UUID)\", \"redirect\": true, ...}]' \"https://my.opalstack.com/api/v1/site/update/\" | jq . ``` (Further examples will omit **headers** and **jq** for the sake of clarity)  You can also authorize requests on our API Documentation page (https://my.opalstack.com/api/v1/doc/) in order to facilitate development. To do so, click the \"**Authorize**\" button on the right side of the page and enter \"**Token 1111111111111111111111111111111111111111**\" in the **Value** field within. Afterword, you will be able to perform requests directly from the documentation page. Be sure to logout when finished.  ### Embedding The Opalstack API supports _embedding_. This allows you to nest child API objects in a single GET request. For example, consider the following GET request performed with **curl**: ``` Request:     curl \"https://my.opalstack.com/api/v1/osuser/list/\"  Response:     [       {         \"id\": \"01010101-0202-0303-0404-050505050505\",         \"state\": \"READY\",         \"ready\": true,         \"name\": \"the_osuser_name\",         \"server\": \"11111111-1212-1313-1414-151515151515\"       }     ] ```  Suppose then that we would like additional information about the **server**. We _could_ proceed to query the **server** UUID (**11111111-1212-1313-1414-151515151515**) at the `/server/read/{uuid}` endpoint, like this: ``` Request:     curl \"https://my.opalstack.com/api/v1/server/read/11111111-1212-1313-1414-151515151515\"  Response:     {       \"id\": \"11111111-1212-1313-1414-151515151515\",       \"hostname\": \"vpsNNN.opalstack.com\"     } ```  However, we could have instead choosen to specify `?embed=server` as a query parameter to the original GET request. This will cause objects to be _embedded_ in the response directly: ``` Request:     curl \"https://my.opalstack.com/api/v1/osuser/list/?embed=server\"  Response:     [       {         \"id\": \"01010101-0202-0303-0404-050505050505\",         \"state\": \"READY\",         \"ready\": true,         \"name\": \"the_osuser_name\",         \"server\": {           \"id\": \"11111111-1212-1313-1414-151515151515\",           \"hostname\": \"vpsNNN.opalstack.com\"         }       }     ] ``` Here, the **server** field has been be populated with the full object instead of just a UUID.  The **embed** query parameter accepts multiple (comma-separated) fields to embed. For example: ``` curl \"https://my.opalstack.com/api/v1/account/info/?embed=web_servers,imap_servers,smtp_servers\" ``` 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package OpalStack

import (
	"encoding/json"
)

// checks if the MariaDBCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MariaDBCreate{}

// MariaDBCreate struct for MariaDBCreate
type MariaDBCreate struct {
	Name string `json:"name"`
	Server string `json:"server"`
	Charset *MariaCharset `json:"charset,omitempty"`
	DbusersReadwrite []string `json:"dbusers_readwrite,omitempty"`
	DbusersReadonly []string `json:"dbusers_readonly,omitempty"`
}

// NewMariaDBCreate instantiates a new MariaDBCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMariaDBCreate(name string, server string) *MariaDBCreate {
	this := MariaDBCreate{}
	this.Name = name
	this.Server = server
	return &this
}

// NewMariaDBCreateWithDefaults instantiates a new MariaDBCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMariaDBCreateWithDefaults() *MariaDBCreate {
	this := MariaDBCreate{}
	return &this
}

// GetName returns the Name field value
func (o *MariaDBCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MariaDBCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MariaDBCreate) SetName(v string) {
	o.Name = v
}

// GetServer returns the Server field value
func (o *MariaDBCreate) GetServer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Server
}

// GetServerOk returns a tuple with the Server field value
// and a boolean to check if the value has been set.
func (o *MariaDBCreate) GetServerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Server, true
}

// SetServer sets field value
func (o *MariaDBCreate) SetServer(v string) {
	o.Server = v
}

// GetCharset returns the Charset field value if set, zero value otherwise.
func (o *MariaDBCreate) GetCharset() MariaCharset {
	if o == nil || IsNil(o.Charset) {
		var ret MariaCharset
		return ret
	}
	return *o.Charset
}

// GetCharsetOk returns a tuple with the Charset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MariaDBCreate) GetCharsetOk() (*MariaCharset, bool) {
	if o == nil || IsNil(o.Charset) {
		return nil, false
	}
	return o.Charset, true
}

// HasCharset returns a boolean if a field has been set.
func (o *MariaDBCreate) HasCharset() bool {
	if o != nil && !IsNil(o.Charset) {
		return true
	}

	return false
}

// SetCharset gets a reference to the given MariaCharset and assigns it to the Charset field.
func (o *MariaDBCreate) SetCharset(v MariaCharset) {
	o.Charset = &v
}

// GetDbusersReadwrite returns the DbusersReadwrite field value if set, zero value otherwise.
func (o *MariaDBCreate) GetDbusersReadwrite() []string {
	if o == nil || IsNil(o.DbusersReadwrite) {
		var ret []string
		return ret
	}
	return o.DbusersReadwrite
}

// GetDbusersReadwriteOk returns a tuple with the DbusersReadwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MariaDBCreate) GetDbusersReadwriteOk() ([]string, bool) {
	if o == nil || IsNil(o.DbusersReadwrite) {
		return nil, false
	}
	return o.DbusersReadwrite, true
}

// HasDbusersReadwrite returns a boolean if a field has been set.
func (o *MariaDBCreate) HasDbusersReadwrite() bool {
	if o != nil && !IsNil(o.DbusersReadwrite) {
		return true
	}

	return false
}

// SetDbusersReadwrite gets a reference to the given []string and assigns it to the DbusersReadwrite field.
func (o *MariaDBCreate) SetDbusersReadwrite(v []string) {
	o.DbusersReadwrite = v
}

// GetDbusersReadonly returns the DbusersReadonly field value if set, zero value otherwise.
func (o *MariaDBCreate) GetDbusersReadonly() []string {
	if o == nil || IsNil(o.DbusersReadonly) {
		var ret []string
		return ret
	}
	return o.DbusersReadonly
}

// GetDbusersReadonlyOk returns a tuple with the DbusersReadonly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MariaDBCreate) GetDbusersReadonlyOk() ([]string, bool) {
	if o == nil || IsNil(o.DbusersReadonly) {
		return nil, false
	}
	return o.DbusersReadonly, true
}

// HasDbusersReadonly returns a boolean if a field has been set.
func (o *MariaDBCreate) HasDbusersReadonly() bool {
	if o != nil && !IsNil(o.DbusersReadonly) {
		return true
	}

	return false
}

// SetDbusersReadonly gets a reference to the given []string and assigns it to the DbusersReadonly field.
func (o *MariaDBCreate) SetDbusersReadonly(v []string) {
	o.DbusersReadonly = v
}

func (o MariaDBCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MariaDBCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["server"] = o.Server
	if !IsNil(o.Charset) {
		toSerialize["charset"] = o.Charset
	}
	if !IsNil(o.DbusersReadwrite) {
		toSerialize["dbusers_readwrite"] = o.DbusersReadwrite
	}
	if !IsNil(o.DbusersReadonly) {
		toSerialize["dbusers_readonly"] = o.DbusersReadonly
	}
	return toSerialize, nil
}

type NullableMariaDBCreate struct {
	value *MariaDBCreate
	isSet bool
}

func (v NullableMariaDBCreate) Get() *MariaDBCreate {
	return v.value
}

func (v *NullableMariaDBCreate) Set(val *MariaDBCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableMariaDBCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableMariaDBCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMariaDBCreate(val *MariaDBCreate) *NullableMariaDBCreate {
	return &NullableMariaDBCreate{value: val, isSet: true}
}

func (v NullableMariaDBCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMariaDBCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


