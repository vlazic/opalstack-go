/*
Opalstack API

 ## The Opalstack JSON REST API  ### Authorization This API uses an **Authorization** header of the form: `\"Authorization: Token 1111111111111111111111111111111111111111\"`, where **1111111111111111111111111111111111111111** represents an API token created at https://my.opalstack.com/tokens/.  The typical format of an API request looks like the following: ``` GET request:     curl -s -H \"Authorization: Token 1111111111111111111111111111111111111111\" \"https://my.opalstack.com/api/v1/site/list/\" | jq .  POST request:     curl -s -H \"Content-Type: application/json\" -H \"Authorization: Token 1111111111111111111111111111111111111111\" \\             -X POST -d '[{\"id\": \"(site UUID)\", \"redirect\": true, ...}]' \"https://my.opalstack.com/api/v1/site/update/\" | jq . ``` (Further examples will omit **headers** and **jq** for the sake of clarity)  You can also authorize requests on our API Documentation page (https://my.opalstack.com/api/v1/doc/) in order to facilitate development. To do so, click the \"**Authorize**\" button on the right side of the page and enter \"**Token 1111111111111111111111111111111111111111**\" in the **Value** field within. Afterword, you will be able to perform requests directly from the documentation page. Be sure to logout when finished.  ### Embedding The Opalstack API supports _embedding_. This allows you to nest child API objects in a single GET request. For example, consider the following GET request performed with **curl**: ``` Request:     curl \"https://my.opalstack.com/api/v1/osuser/list/\"  Response:     [       {         \"id\": \"01010101-0202-0303-0404-050505050505\",         \"state\": \"READY\",         \"ready\": true,         \"name\": \"the_osuser_name\",         \"server\": \"11111111-1212-1313-1414-151515151515\"       }     ] ```  Suppose then that we would like additional information about the **server**. We _could_ proceed to query the **server** UUID (**11111111-1212-1313-1414-151515151515**) at the `/server/read/{uuid}` endpoint, like this: ``` Request:     curl \"https://my.opalstack.com/api/v1/server/read/11111111-1212-1313-1414-151515151515\"  Response:     {       \"id\": \"11111111-1212-1313-1414-151515151515\",       \"hostname\": \"vpsNNN.opalstack.com\"     } ```  However, we could have instead choosen to specify `?embed=server` as a query parameter to the original GET request. This will cause objects to be _embedded_ in the response directly: ``` Request:     curl \"https://my.opalstack.com/api/v1/osuser/list/?embed=server\"  Response:     [       {         \"id\": \"01010101-0202-0303-0404-050505050505\",         \"state\": \"READY\",         \"ready\": true,         \"name\": \"the_osuser_name\",         \"server\": {           \"id\": \"11111111-1212-1313-1414-151515151515\",           \"hostname\": \"vpsNNN.opalstack.com\"         }       }     ] ``` Here, the **server** field has been be populated with the full object instead of just a UUID.  The **embed** query parameter accepts multiple (comma-separated) fields to embed. For example: ``` curl \"https://my.opalstack.com/api/v1/account/info/?embed=web_servers,imap_servers,smtp_servers\" ``` 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package OpalStack

import (
	"encoding/json"
)

// checks if the IPAddressResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IPAddressResponse{}

// IPAddressResponse struct for IPAddressResponse
type IPAddressResponse struct {
	Id string `json:"id"`
	Ip string `json:"ip"`
	Server string `json:"server"`
	Type IPAddressTypeEnum `json:"type"`
	Primary bool `json:"primary"`
}

// NewIPAddressResponse instantiates a new IPAddressResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIPAddressResponse(id string, ip string, server string, type_ IPAddressTypeEnum, primary bool) *IPAddressResponse {
	this := IPAddressResponse{}
	this.Id = id
	this.Ip = ip
	this.Server = server
	this.Type = type_
	this.Primary = primary
	return &this
}

// NewIPAddressResponseWithDefaults instantiates a new IPAddressResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIPAddressResponseWithDefaults() *IPAddressResponse {
	this := IPAddressResponse{}
	return &this
}

// GetId returns the Id field value
func (o *IPAddressResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IPAddressResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IPAddressResponse) SetId(v string) {
	o.Id = v
}

// GetIp returns the Ip field value
func (o *IPAddressResponse) GetIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ip
}

// GetIpOk returns a tuple with the Ip field value
// and a boolean to check if the value has been set.
func (o *IPAddressResponse) GetIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ip, true
}

// SetIp sets field value
func (o *IPAddressResponse) SetIp(v string) {
	o.Ip = v
}

// GetServer returns the Server field value
func (o *IPAddressResponse) GetServer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Server
}

// GetServerOk returns a tuple with the Server field value
// and a boolean to check if the value has been set.
func (o *IPAddressResponse) GetServerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Server, true
}

// SetServer sets field value
func (o *IPAddressResponse) SetServer(v string) {
	o.Server = v
}

// GetType returns the Type field value
func (o *IPAddressResponse) GetType() IPAddressTypeEnum {
	if o == nil {
		var ret IPAddressTypeEnum
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *IPAddressResponse) GetTypeOk() (*IPAddressTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *IPAddressResponse) SetType(v IPAddressTypeEnum) {
	o.Type = v
}

// GetPrimary returns the Primary field value
func (o *IPAddressResponse) GetPrimary() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value
// and a boolean to check if the value has been set.
func (o *IPAddressResponse) GetPrimaryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Primary, true
}

// SetPrimary sets field value
func (o *IPAddressResponse) SetPrimary(v bool) {
	o.Primary = v
}

func (o IPAddressResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IPAddressResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["ip"] = o.Ip
	toSerialize["server"] = o.Server
	toSerialize["type"] = o.Type
	toSerialize["primary"] = o.Primary
	return toSerialize, nil
}

type NullableIPAddressResponse struct {
	value *IPAddressResponse
	isSet bool
}

func (v NullableIPAddressResponse) Get() *IPAddressResponse {
	return v.value
}

func (v *NullableIPAddressResponse) Set(val *IPAddressResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableIPAddressResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableIPAddressResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIPAddressResponse(val *IPAddressResponse) *NullableIPAddressResponse {
	return &NullableIPAddressResponse{value: val, isSet: true}
}

func (v NullableIPAddressResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIPAddressResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


