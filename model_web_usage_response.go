/*
Opalstack API

 ## The Opalstack JSON REST API  ### Authorization This API uses an **Authorization** header of the form: `\"Authorization: Token 1111111111111111111111111111111111111111\"`, where **1111111111111111111111111111111111111111** represents an API token created at https://my.opalstack.com/tokens/.  The typical format of an API request looks like the following: ``` GET request:     curl -s -H \"Authorization: Token 1111111111111111111111111111111111111111\" \"https://my.opalstack.com/api/v1/site/list/\" | jq .  POST request:     curl -s -H \"Content-Type: application/json\" -H \"Authorization: Token 1111111111111111111111111111111111111111\" \\             -X POST -d '[{\"id\": \"(site UUID)\", \"redirect\": true, ...}]' \"https://my.opalstack.com/api/v1/site/update/\" | jq . ``` (Further examples will omit **headers** and **jq** for the sake of clarity)  You can also authorize requests on our API Documentation page (https://my.opalstack.com/api/v1/doc/) in order to facilitate development. To do so, click the \"**Authorize**\" button on the right side of the page and enter \"**Token 1111111111111111111111111111111111111111**\" in the **Value** field within. Afterword, you will be able to perform requests directly from the documentation page. Be sure to logout when finished.  ### Embedding The Opalstack API supports _embedding_. This allows you to nest child API objects in a single GET request. For example, consider the following GET request performed with **curl**: ``` Request:     curl \"https://my.opalstack.com/api/v1/osuser/list/\"  Response:     [       {         \"id\": \"01010101-0202-0303-0404-050505050505\",         \"state\": \"READY\",         \"ready\": true,         \"name\": \"the_osuser_name\",         \"server\": \"11111111-1212-1313-1414-151515151515\"       }     ] ```  Suppose then that we would like additional information about the **server**. We _could_ proceed to query the **server** UUID (**11111111-1212-1313-1414-151515151515**) at the `/server/read/{uuid}` endpoint, like this: ``` Request:     curl \"https://my.opalstack.com/api/v1/server/read/11111111-1212-1313-1414-151515151515\"  Response:     {       \"id\": \"11111111-1212-1313-1414-151515151515\",       \"hostname\": \"vpsNNN.opalstack.com\"     } ```  However, we could have instead choosen to specify `?embed=server` as a query parameter to the original GET request. This will cause objects to be _embedded_ in the response directly: ``` Request:     curl \"https://my.opalstack.com/api/v1/osuser/list/?embed=server\"  Response:     [       {         \"id\": \"01010101-0202-0303-0404-050505050505\",         \"state\": \"READY\",         \"ready\": true,         \"name\": \"the_osuser_name\",         \"server\": {           \"id\": \"11111111-1212-1313-1414-151515151515\",           \"hostname\": \"vpsNNN.opalstack.com\"         }       }     ] ``` Here, the **server** field has been be populated with the full object instead of just a UUID.  The **embed** query parameter accepts multiple (comma-separated) fields to embed. For example: ``` curl \"https://my.opalstack.com/api/v1/account/info/?embed=web_servers,imap_servers,smtp_servers\" ``` 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package OpalStack

import (
	"encoding/json"
)

// checks if the WebUsageResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebUsageResponse{}

// WebUsageResponse struct for WebUsageResponse
type WebUsageResponse struct {
	Osusers []WebUsageOSUserResponse `json:"osusers"`
	Mariadbs []WebUsageMariaDBResponse `json:"mariadbs"`
	Psqldbs []WebUsagePsqlDBResponse `json:"psqldbs"`
}

// NewWebUsageResponse instantiates a new WebUsageResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebUsageResponse(osusers []WebUsageOSUserResponse, mariadbs []WebUsageMariaDBResponse, psqldbs []WebUsagePsqlDBResponse) *WebUsageResponse {
	this := WebUsageResponse{}
	this.Osusers = osusers
	this.Mariadbs = mariadbs
	this.Psqldbs = psqldbs
	return &this
}

// NewWebUsageResponseWithDefaults instantiates a new WebUsageResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebUsageResponseWithDefaults() *WebUsageResponse {
	this := WebUsageResponse{}
	return &this
}

// GetOsusers returns the Osusers field value
func (o *WebUsageResponse) GetOsusers() []WebUsageOSUserResponse {
	if o == nil {
		var ret []WebUsageOSUserResponse
		return ret
	}

	return o.Osusers
}

// GetOsusersOk returns a tuple with the Osusers field value
// and a boolean to check if the value has been set.
func (o *WebUsageResponse) GetOsusersOk() ([]WebUsageOSUserResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Osusers, true
}

// SetOsusers sets field value
func (o *WebUsageResponse) SetOsusers(v []WebUsageOSUserResponse) {
	o.Osusers = v
}

// GetMariadbs returns the Mariadbs field value
func (o *WebUsageResponse) GetMariadbs() []WebUsageMariaDBResponse {
	if o == nil {
		var ret []WebUsageMariaDBResponse
		return ret
	}

	return o.Mariadbs
}

// GetMariadbsOk returns a tuple with the Mariadbs field value
// and a boolean to check if the value has been set.
func (o *WebUsageResponse) GetMariadbsOk() ([]WebUsageMariaDBResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mariadbs, true
}

// SetMariadbs sets field value
func (o *WebUsageResponse) SetMariadbs(v []WebUsageMariaDBResponse) {
	o.Mariadbs = v
}

// GetPsqldbs returns the Psqldbs field value
func (o *WebUsageResponse) GetPsqldbs() []WebUsagePsqlDBResponse {
	if o == nil {
		var ret []WebUsagePsqlDBResponse
		return ret
	}

	return o.Psqldbs
}

// GetPsqldbsOk returns a tuple with the Psqldbs field value
// and a boolean to check if the value has been set.
func (o *WebUsageResponse) GetPsqldbsOk() ([]WebUsagePsqlDBResponse, bool) {
	if o == nil {
		return nil, false
	}
	return o.Psqldbs, true
}

// SetPsqldbs sets field value
func (o *WebUsageResponse) SetPsqldbs(v []WebUsagePsqlDBResponse) {
	o.Psqldbs = v
}

func (o WebUsageResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebUsageResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["osusers"] = o.Osusers
	toSerialize["mariadbs"] = o.Mariadbs
	toSerialize["psqldbs"] = o.Psqldbs
	return toSerialize, nil
}

type NullableWebUsageResponse struct {
	value *WebUsageResponse
	isSet bool
}

func (v NullableWebUsageResponse) Get() *WebUsageResponse {
	return v.value
}

func (v *NullableWebUsageResponse) Set(val *WebUsageResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableWebUsageResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableWebUsageResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebUsageResponse(val *WebUsageResponse) *NullableWebUsageResponse {
	return &NullableWebUsageResponse{value: val, isSet: true}
}

func (v NullableWebUsageResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebUsageResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


