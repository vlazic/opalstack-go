/*
Opalstack API

 ## The Opalstack JSON REST API  ### Authorization This API uses an **Authorization** header of the form: `\"Authorization: Token 1111111111111111111111111111111111111111\"`, where **1111111111111111111111111111111111111111** represents an API token created at https://my.opalstack.com/tokens/.  The typical format of an API request looks like the following: ``` GET request:     curl -s -H \"Authorization: Token 1111111111111111111111111111111111111111\" \"https://my.opalstack.com/api/v1/site/list/\" | jq .  POST request:     curl -s -H \"Content-Type: application/json\" -H \"Authorization: Token 1111111111111111111111111111111111111111\" \\             -X POST -d '[{\"id\": \"(site UUID)\", \"redirect\": true, ...}]' \"https://my.opalstack.com/api/v1/site/update/\" | jq . ``` (Further examples will omit **headers** and **jq** for the sake of clarity)  You can also authorize requests on our API Documentation page (https://my.opalstack.com/api/v1/doc/) in order to facilitate development. To do so, click the \"**Authorize**\" button on the right side of the page and enter \"**Token 1111111111111111111111111111111111111111**\" in the **Value** field within. Afterword, you will be able to perform requests directly from the documentation page. Be sure to logout when finished.  ### Embedding The Opalstack API supports _embedding_. This allows you to nest child API objects in a single GET request. For example, consider the following GET request performed with **curl**: ``` Request:     curl \"https://my.opalstack.com/api/v1/osuser/list/\"  Response:     [       {         \"id\": \"01010101-0202-0303-0404-050505050505\",         \"state\": \"READY\",         \"ready\": true,         \"name\": \"the_osuser_name\",         \"server\": \"11111111-1212-1313-1414-151515151515\"       }     ] ```  Suppose then that we would like additional information about the **server**. We _could_ proceed to query the **server** UUID (**11111111-1212-1313-1414-151515151515**) at the `/server/read/{uuid}` endpoint, like this: ``` Request:     curl \"https://my.opalstack.com/api/v1/server/read/11111111-1212-1313-1414-151515151515\"  Response:     {       \"id\": \"11111111-1212-1313-1414-151515151515\",       \"hostname\": \"vpsNNN.opalstack.com\"     } ```  However, we could have instead choosen to specify `?embed=server` as a query parameter to the original GET request. This will cause objects to be _embedded_ in the response directly: ``` Request:     curl \"https://my.opalstack.com/api/v1/osuser/list/?embed=server\"  Response:     [       {         \"id\": \"01010101-0202-0303-0404-050505050505\",         \"state\": \"READY\",         \"ready\": true,         \"name\": \"the_osuser_name\",         \"server\": {           \"id\": \"11111111-1212-1313-1414-151515151515\",           \"hostname\": \"vpsNNN.opalstack.com\"         }       }     ] ``` Here, the **server** field has been be populated with the full object instead of just a UUID.  The **embed** query parameter accepts multiple (comma-separated) fields to embed. For example: ``` curl \"https://my.opalstack.com/api/v1/account/info/?embed=web_servers,imap_servers,smtp_servers\" ``` 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package OpalStack

import (
	"encoding/json"
)

// checks if the WebserverUsageResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WebserverUsageResponse{}

// WebserverUsageResponse struct for WebserverUsageResponse
type WebserverUsageResponse struct {
	Hostname *string `json:"hostname,omitempty"`
	DiskTotal int32 `json:"disk_total"`
	DiskUsed int32 `json:"disk_used"`
	DiskAvailable int32 `json:"disk_available"`
	RssTotal int32 `json:"rss_total"`
	RssUsed int32 `json:"rss_used"`
	Type *string `json:"type,omitempty"`
}

// NewWebserverUsageResponse instantiates a new WebserverUsageResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWebserverUsageResponse(diskTotal int32, diskUsed int32, diskAvailable int32, rssTotal int32, rssUsed int32) *WebserverUsageResponse {
	this := WebserverUsageResponse{}
	var hostname string = "opal1.opalstack.com"
	this.Hostname = &hostname
	this.DiskTotal = diskTotal
	this.DiskUsed = diskUsed
	this.DiskAvailable = diskAvailable
	this.RssTotal = rssTotal
	this.RssUsed = rssUsed
	var type_ string = "W"
	this.Type = &type_
	return &this
}

// NewWebserverUsageResponseWithDefaults instantiates a new WebserverUsageResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWebserverUsageResponseWithDefaults() *WebserverUsageResponse {
	this := WebserverUsageResponse{}
	var hostname string = "opal1.opalstack.com"
	this.Hostname = &hostname
	var type_ string = "W"
	this.Type = &type_
	return &this
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *WebserverUsageResponse) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebserverUsageResponse) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *WebserverUsageResponse) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *WebserverUsageResponse) SetHostname(v string) {
	o.Hostname = &v
}

// GetDiskTotal returns the DiskTotal field value
func (o *WebserverUsageResponse) GetDiskTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DiskTotal
}

// GetDiskTotalOk returns a tuple with the DiskTotal field value
// and a boolean to check if the value has been set.
func (o *WebserverUsageResponse) GetDiskTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiskTotal, true
}

// SetDiskTotal sets field value
func (o *WebserverUsageResponse) SetDiskTotal(v int32) {
	o.DiskTotal = v
}

// GetDiskUsed returns the DiskUsed field value
func (o *WebserverUsageResponse) GetDiskUsed() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DiskUsed
}

// GetDiskUsedOk returns a tuple with the DiskUsed field value
// and a boolean to check if the value has been set.
func (o *WebserverUsageResponse) GetDiskUsedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiskUsed, true
}

// SetDiskUsed sets field value
func (o *WebserverUsageResponse) SetDiskUsed(v int32) {
	o.DiskUsed = v
}

// GetDiskAvailable returns the DiskAvailable field value
func (o *WebserverUsageResponse) GetDiskAvailable() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DiskAvailable
}

// GetDiskAvailableOk returns a tuple with the DiskAvailable field value
// and a boolean to check if the value has been set.
func (o *WebserverUsageResponse) GetDiskAvailableOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DiskAvailable, true
}

// SetDiskAvailable sets field value
func (o *WebserverUsageResponse) SetDiskAvailable(v int32) {
	o.DiskAvailable = v
}

// GetRssTotal returns the RssTotal field value
func (o *WebserverUsageResponse) GetRssTotal() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RssTotal
}

// GetRssTotalOk returns a tuple with the RssTotal field value
// and a boolean to check if the value has been set.
func (o *WebserverUsageResponse) GetRssTotalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RssTotal, true
}

// SetRssTotal sets field value
func (o *WebserverUsageResponse) SetRssTotal(v int32) {
	o.RssTotal = v
}

// GetRssUsed returns the RssUsed field value
func (o *WebserverUsageResponse) GetRssUsed() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RssUsed
}

// GetRssUsedOk returns a tuple with the RssUsed field value
// and a boolean to check if the value has been set.
func (o *WebserverUsageResponse) GetRssUsedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RssUsed, true
}

// SetRssUsed sets field value
func (o *WebserverUsageResponse) SetRssUsed(v int32) {
	o.RssUsed = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *WebserverUsageResponse) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WebserverUsageResponse) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *WebserverUsageResponse) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *WebserverUsageResponse) SetType(v string) {
	o.Type = &v
}

func (o WebserverUsageResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WebserverUsageResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	toSerialize["disk_total"] = o.DiskTotal
	toSerialize["disk_used"] = o.DiskUsed
	toSerialize["disk_available"] = o.DiskAvailable
	toSerialize["rss_total"] = o.RssTotal
	toSerialize["rss_used"] = o.RssUsed
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableWebserverUsageResponse struct {
	value *WebserverUsageResponse
	isSet bool
}

func (v NullableWebserverUsageResponse) Get() *WebserverUsageResponse {
	return v.value
}

func (v *NullableWebserverUsageResponse) Set(val *WebserverUsageResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableWebserverUsageResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableWebserverUsageResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebserverUsageResponse(val *WebserverUsageResponse) *NullableWebserverUsageResponse {
	return &NullableWebserverUsageResponse{value: val, isSet: true}
}

func (v NullableWebserverUsageResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebserverUsageResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


