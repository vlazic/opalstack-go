/*
Opalstack API

 ## The Opalstack JSON REST API  ### Authorization This API uses an **Authorization** header of the form: `\"Authorization: Token 1111111111111111111111111111111111111111\"`, where **1111111111111111111111111111111111111111** represents an API token created at https://my.opalstack.com/tokens/.  The typical format of an API request looks like the following: ``` GET request:     curl -s -H \"Authorization: Token 1111111111111111111111111111111111111111\" \"https://my.opalstack.com/api/v1/site/list/\" | jq .  POST request:     curl -s -H \"Content-Type: application/json\" -H \"Authorization: Token 1111111111111111111111111111111111111111\" \\             -X POST -d '[{\"id\": \"(site UUID)\", \"redirect\": true, ...}]' \"https://my.opalstack.com/api/v1/site/update/\" | jq . ``` (Further examples will omit **headers** and **jq** for the sake of clarity)  You can also authorize requests on our API Documentation page (https://my.opalstack.com/api/v1/doc/) in order to facilitate development. To do so, click the \"**Authorize**\" button on the right side of the page and enter \"**Token 1111111111111111111111111111111111111111**\" in the **Value** field within. Afterword, you will be able to perform requests directly from the documentation page. Be sure to logout when finished.  ### Embedding The Opalstack API supports _embedding_. This allows you to nest child API objects in a single GET request. For example, consider the following GET request performed with **curl**: ``` Request:     curl \"https://my.opalstack.com/api/v1/osuser/list/\"  Response:     [       {         \"id\": \"01010101-0202-0303-0404-050505050505\",         \"state\": \"READY\",         \"ready\": true,         \"name\": \"the_osuser_name\",         \"server\": \"11111111-1212-1313-1414-151515151515\"       }     ] ```  Suppose then that we would like additional information about the **server**. We _could_ proceed to query the **server** UUID (**11111111-1212-1313-1414-151515151515**) at the `/server/read/{uuid}` endpoint, like this: ``` Request:     curl \"https://my.opalstack.com/api/v1/server/read/11111111-1212-1313-1414-151515151515\"  Response:     {       \"id\": \"11111111-1212-1313-1414-151515151515\",       \"hostname\": \"vpsNNN.opalstack.com\"     } ```  However, we could have instead choosen to specify `?embed=server` as a query parameter to the original GET request. This will cause objects to be _embedded_ in the response directly: ``` Request:     curl \"https://my.opalstack.com/api/v1/osuser/list/?embed=server\"  Response:     [       {         \"id\": \"01010101-0202-0303-0404-050505050505\",         \"state\": \"READY\",         \"ready\": true,         \"name\": \"the_osuser_name\",         \"server\": {           \"id\": \"11111111-1212-1313-1414-151515151515\",           \"hostname\": \"vpsNNN.opalstack.com\"         }       }     ] ``` Here, the **server** field has been be populated with the full object instead of just a UUID.  The **embed** query parameter accepts multiple (comma-separated) fields to embed. For example: ``` curl \"https://my.opalstack.com/api/v1/account/info/?embed=web_servers,imap_servers,smtp_servers\" ``` 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package OpalStack

import (
	"encoding/json"
)

// checks if the ApplicationCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ApplicationCreate{}

// ApplicationCreate struct for ApplicationCreate
type ApplicationCreate struct {
	Name string `json:"name"`
	Osuser string `json:"osuser"`
	Type AppTypeEnum `json:"type"`
	InstallerUrl NullableString `json:"installer_url,omitempty"`
	Json map[string]interface{} `json:"json,omitempty"`
}

// NewApplicationCreate instantiates a new ApplicationCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationCreate(name string, osuser string, type_ AppTypeEnum) *ApplicationCreate {
	this := ApplicationCreate{}
	this.Name = name
	this.Osuser = osuser
	this.Type = type_
	return &this
}

// NewApplicationCreateWithDefaults instantiates a new ApplicationCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationCreateWithDefaults() *ApplicationCreate {
	this := ApplicationCreate{}
	return &this
}

// GetName returns the Name field value
func (o *ApplicationCreate) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ApplicationCreate) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ApplicationCreate) SetName(v string) {
	o.Name = v
}

// GetOsuser returns the Osuser field value
func (o *ApplicationCreate) GetOsuser() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Osuser
}

// GetOsuserOk returns a tuple with the Osuser field value
// and a boolean to check if the value has been set.
func (o *ApplicationCreate) GetOsuserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Osuser, true
}

// SetOsuser sets field value
func (o *ApplicationCreate) SetOsuser(v string) {
	o.Osuser = v
}

// GetType returns the Type field value
func (o *ApplicationCreate) GetType() AppTypeEnum {
	if o == nil {
		var ret AppTypeEnum
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ApplicationCreate) GetTypeOk() (*AppTypeEnum, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ApplicationCreate) SetType(v AppTypeEnum) {
	o.Type = v
}

// GetInstallerUrl returns the InstallerUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationCreate) GetInstallerUrl() string {
	if o == nil || IsNil(o.InstallerUrl.Get()) {
		var ret string
		return ret
	}
	return *o.InstallerUrl.Get()
}

// GetInstallerUrlOk returns a tuple with the InstallerUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationCreate) GetInstallerUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InstallerUrl.Get(), o.InstallerUrl.IsSet()
}

// HasInstallerUrl returns a boolean if a field has been set.
func (o *ApplicationCreate) HasInstallerUrl() bool {
	if o != nil && o.InstallerUrl.IsSet() {
		return true
	}

	return false
}

// SetInstallerUrl gets a reference to the given NullableString and assigns it to the InstallerUrl field.
func (o *ApplicationCreate) SetInstallerUrl(v string) {
	o.InstallerUrl.Set(&v)
}
// SetInstallerUrlNil sets the value for InstallerUrl to be an explicit nil
func (o *ApplicationCreate) SetInstallerUrlNil() {
	o.InstallerUrl.Set(nil)
}

// UnsetInstallerUrl ensures that no value is present for InstallerUrl, not even an explicit nil
func (o *ApplicationCreate) UnsetInstallerUrl() {
	o.InstallerUrl.Unset()
}

// GetJson returns the Json field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationCreate) GetJson() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Json
}

// GetJsonOk returns a tuple with the Json field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationCreate) GetJsonOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Json) {
		return map[string]interface{}{}, false
	}
	return o.Json, true
}

// HasJson returns a boolean if a field has been set.
func (o *ApplicationCreate) HasJson() bool {
	if o != nil && IsNil(o.Json) {
		return true
	}

	return false
}

// SetJson gets a reference to the given map[string]interface{} and assigns it to the Json field.
func (o *ApplicationCreate) SetJson(v map[string]interface{}) {
	o.Json = v
}

func (o ApplicationCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ApplicationCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["osuser"] = o.Osuser
	toSerialize["type"] = o.Type
	if o.InstallerUrl.IsSet() {
		toSerialize["installer_url"] = o.InstallerUrl.Get()
	}
	if o.Json != nil {
		toSerialize["json"] = o.Json
	}
	return toSerialize, nil
}

type NullableApplicationCreate struct {
	value *ApplicationCreate
	isSet bool
}

func (v NullableApplicationCreate) Get() *ApplicationCreate {
	return v.value
}

func (v *NullableApplicationCreate) Set(val *ApplicationCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationCreate(val *ApplicationCreate) *NullableApplicationCreate {
	return &NullableApplicationCreate{value: val, isSet: true}
}

func (v NullableApplicationCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


