/*
Opalstack API

 ## The Opalstack JSON REST API  ### Authorization This API uses an **Authorization** header of the form: `\"Authorization: Token 1111111111111111111111111111111111111111\"`, where **1111111111111111111111111111111111111111** represents an API token created at https://my.opalstack.com/tokens/.  The typical format of an API request looks like the following: ``` GET request:     curl -s -H \"Authorization: Token 1111111111111111111111111111111111111111\" \"https://my.opalstack.com/api/v1/site/list/\" | jq .  POST request:     curl -s -H \"Content-Type: application/json\" -H \"Authorization: Token 1111111111111111111111111111111111111111\" \\             -X POST -d '[{\"id\": \"(site UUID)\", \"redirect\": true, ...}]' \"https://my.opalstack.com/api/v1/site/update/\" | jq . ``` (Further examples will omit **headers** and **jq** for the sake of clarity)  You can also authorize requests on our API Documentation page (https://my.opalstack.com/api/v1/doc/) in order to facilitate development. To do so, click the \"**Authorize**\" button on the right side of the page and enter \"**Token 1111111111111111111111111111111111111111**\" in the **Value** field within. Afterword, you will be able to perform requests directly from the documentation page. Be sure to logout when finished.  ### Embedding The Opalstack API supports _embedding_. This allows you to nest child API objects in a single GET request. For example, consider the following GET request performed with **curl**: ``` Request:     curl \"https://my.opalstack.com/api/v1/osuser/list/\"  Response:     [       {         \"id\": \"01010101-0202-0303-0404-050505050505\",         \"state\": \"READY\",         \"ready\": true,         \"name\": \"the_osuser_name\",         \"server\": \"11111111-1212-1313-1414-151515151515\"       }     ] ```  Suppose then that we would like additional information about the **server**. We _could_ proceed to query the **server** UUID (**11111111-1212-1313-1414-151515151515**) at the `/server/read/{uuid}` endpoint, like this: ``` Request:     curl \"https://my.opalstack.com/api/v1/server/read/11111111-1212-1313-1414-151515151515\"  Response:     {       \"id\": \"11111111-1212-1313-1414-151515151515\",       \"hostname\": \"vpsNNN.opalstack.com\"     } ```  However, we could have instead choosen to specify `?embed=server` as a query parameter to the original GET request. This will cause objects to be _embedded_ in the response directly: ``` Request:     curl \"https://my.opalstack.com/api/v1/osuser/list/?embed=server\"  Response:     [       {         \"id\": \"01010101-0202-0303-0404-050505050505\",         \"state\": \"READY\",         \"ready\": true,         \"name\": \"the_osuser_name\",         \"server\": {           \"id\": \"11111111-1212-1313-1414-151515151515\",           \"hostname\": \"vpsNNN.opalstack.com\"         }       }     ] ``` Here, the **server** field has been be populated with the full object instead of just a UUID.  The **embed** query parameter accepts multiple (comma-separated) fields to embed. For example: ``` curl \"https://my.opalstack.com/api/v1/account/info/?embed=web_servers,imap_servers,smtp_servers\" ``` 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package OpalStack

import (
	"encoding/json"
)

// checks if the SiteCreate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SiteCreate{}

// SiteCreate struct for SiteCreate
type SiteCreate struct {
	Name *string `json:"name,omitempty"`
	Ip4 NullableString `json:"ip4,omitempty"`
	Ip6 NullableString `json:"ip6,omitempty"`
	Domains []string `json:"domains"`
	Routes []Route `json:"routes"`
	Cert NullableString `json:"cert,omitempty"`
	// Automatically redirect to https://
	Redirect *bool `json:"redirect,omitempty"`
	// Automatically issue Lets Encrypt certificate for the domains on this site?
	GenerateLe *bool `json:"generate_le,omitempty"`
	LeHttpChallengeTokens []string `json:"le_http_challenge_tokens,omitempty"`
	Disabled *bool `json:"disabled,omitempty"`
	PrimaryDomain NullableString `json:"primary_domain,omitempty"`
}

// NewSiteCreate instantiates a new SiteCreate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteCreate(domains []string, routes []Route) *SiteCreate {
	this := SiteCreate{}
	this.Domains = domains
	this.Routes = routes
	return &this
}

// NewSiteCreateWithDefaults instantiates a new SiteCreate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteCreateWithDefaults() *SiteCreate {
	this := SiteCreate{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SiteCreate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteCreate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SiteCreate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SiteCreate) SetName(v string) {
	o.Name = &v
}

// GetIp4 returns the Ip4 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteCreate) GetIp4() string {
	if o == nil || IsNil(o.Ip4.Get()) {
		var ret string
		return ret
	}
	return *o.Ip4.Get()
}

// GetIp4Ok returns a tuple with the Ip4 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteCreate) GetIp4Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ip4.Get(), o.Ip4.IsSet()
}

// HasIp4 returns a boolean if a field has been set.
func (o *SiteCreate) HasIp4() bool {
	if o != nil && o.Ip4.IsSet() {
		return true
	}

	return false
}

// SetIp4 gets a reference to the given NullableString and assigns it to the Ip4 field.
func (o *SiteCreate) SetIp4(v string) {
	o.Ip4.Set(&v)
}
// SetIp4Nil sets the value for Ip4 to be an explicit nil
func (o *SiteCreate) SetIp4Nil() {
	o.Ip4.Set(nil)
}

// UnsetIp4 ensures that no value is present for Ip4, not even an explicit nil
func (o *SiteCreate) UnsetIp4() {
	o.Ip4.Unset()
}

// GetIp6 returns the Ip6 field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteCreate) GetIp6() string {
	if o == nil || IsNil(o.Ip6.Get()) {
		var ret string
		return ret
	}
	return *o.Ip6.Get()
}

// GetIp6Ok returns a tuple with the Ip6 field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteCreate) GetIp6Ok() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ip6.Get(), o.Ip6.IsSet()
}

// HasIp6 returns a boolean if a field has been set.
func (o *SiteCreate) HasIp6() bool {
	if o != nil && o.Ip6.IsSet() {
		return true
	}

	return false
}

// SetIp6 gets a reference to the given NullableString and assigns it to the Ip6 field.
func (o *SiteCreate) SetIp6(v string) {
	o.Ip6.Set(&v)
}
// SetIp6Nil sets the value for Ip6 to be an explicit nil
func (o *SiteCreate) SetIp6Nil() {
	o.Ip6.Set(nil)
}

// UnsetIp6 ensures that no value is present for Ip6, not even an explicit nil
func (o *SiteCreate) UnsetIp6() {
	o.Ip6.Unset()
}

// GetDomains returns the Domains field value
func (o *SiteCreate) GetDomains() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Domains
}

// GetDomainsOk returns a tuple with the Domains field value
// and a boolean to check if the value has been set.
func (o *SiteCreate) GetDomainsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Domains, true
}

// SetDomains sets field value
func (o *SiteCreate) SetDomains(v []string) {
	o.Domains = v
}

// GetRoutes returns the Routes field value
func (o *SiteCreate) GetRoutes() []Route {
	if o == nil {
		var ret []Route
		return ret
	}

	return o.Routes
}

// GetRoutesOk returns a tuple with the Routes field value
// and a boolean to check if the value has been set.
func (o *SiteCreate) GetRoutesOk() ([]Route, bool) {
	if o == nil {
		return nil, false
	}
	return o.Routes, true
}

// SetRoutes sets field value
func (o *SiteCreate) SetRoutes(v []Route) {
	o.Routes = v
}

// GetCert returns the Cert field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteCreate) GetCert() string {
	if o == nil || IsNil(o.Cert.Get()) {
		var ret string
		return ret
	}
	return *o.Cert.Get()
}

// GetCertOk returns a tuple with the Cert field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteCreate) GetCertOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cert.Get(), o.Cert.IsSet()
}

// HasCert returns a boolean if a field has been set.
func (o *SiteCreate) HasCert() bool {
	if o != nil && o.Cert.IsSet() {
		return true
	}

	return false
}

// SetCert gets a reference to the given NullableString and assigns it to the Cert field.
func (o *SiteCreate) SetCert(v string) {
	o.Cert.Set(&v)
}
// SetCertNil sets the value for Cert to be an explicit nil
func (o *SiteCreate) SetCertNil() {
	o.Cert.Set(nil)
}

// UnsetCert ensures that no value is present for Cert, not even an explicit nil
func (o *SiteCreate) UnsetCert() {
	o.Cert.Unset()
}

// GetRedirect returns the Redirect field value if set, zero value otherwise.
func (o *SiteCreate) GetRedirect() bool {
	if o == nil || IsNil(o.Redirect) {
		var ret bool
		return ret
	}
	return *o.Redirect
}

// GetRedirectOk returns a tuple with the Redirect field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteCreate) GetRedirectOk() (*bool, bool) {
	if o == nil || IsNil(o.Redirect) {
		return nil, false
	}
	return o.Redirect, true
}

// HasRedirect returns a boolean if a field has been set.
func (o *SiteCreate) HasRedirect() bool {
	if o != nil && !IsNil(o.Redirect) {
		return true
	}

	return false
}

// SetRedirect gets a reference to the given bool and assigns it to the Redirect field.
func (o *SiteCreate) SetRedirect(v bool) {
	o.Redirect = &v
}

// GetGenerateLe returns the GenerateLe field value if set, zero value otherwise.
func (o *SiteCreate) GetGenerateLe() bool {
	if o == nil || IsNil(o.GenerateLe) {
		var ret bool
		return ret
	}
	return *o.GenerateLe
}

// GetGenerateLeOk returns a tuple with the GenerateLe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteCreate) GetGenerateLeOk() (*bool, bool) {
	if o == nil || IsNil(o.GenerateLe) {
		return nil, false
	}
	return o.GenerateLe, true
}

// HasGenerateLe returns a boolean if a field has been set.
func (o *SiteCreate) HasGenerateLe() bool {
	if o != nil && !IsNil(o.GenerateLe) {
		return true
	}

	return false
}

// SetGenerateLe gets a reference to the given bool and assigns it to the GenerateLe field.
func (o *SiteCreate) SetGenerateLe(v bool) {
	o.GenerateLe = &v
}

// GetLeHttpChallengeTokens returns the LeHttpChallengeTokens field value if set, zero value otherwise.
func (o *SiteCreate) GetLeHttpChallengeTokens() []string {
	if o == nil || IsNil(o.LeHttpChallengeTokens) {
		var ret []string
		return ret
	}
	return o.LeHttpChallengeTokens
}

// GetLeHttpChallengeTokensOk returns a tuple with the LeHttpChallengeTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteCreate) GetLeHttpChallengeTokensOk() ([]string, bool) {
	if o == nil || IsNil(o.LeHttpChallengeTokens) {
		return nil, false
	}
	return o.LeHttpChallengeTokens, true
}

// HasLeHttpChallengeTokens returns a boolean if a field has been set.
func (o *SiteCreate) HasLeHttpChallengeTokens() bool {
	if o != nil && !IsNil(o.LeHttpChallengeTokens) {
		return true
	}

	return false
}

// SetLeHttpChallengeTokens gets a reference to the given []string and assigns it to the LeHttpChallengeTokens field.
func (o *SiteCreate) SetLeHttpChallengeTokens(v []string) {
	o.LeHttpChallengeTokens = v
}

// GetDisabled returns the Disabled field value if set, zero value otherwise.
func (o *SiteCreate) GetDisabled() bool {
	if o == nil || IsNil(o.Disabled) {
		var ret bool
		return ret
	}
	return *o.Disabled
}

// GetDisabledOk returns a tuple with the Disabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SiteCreate) GetDisabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Disabled) {
		return nil, false
	}
	return o.Disabled, true
}

// HasDisabled returns a boolean if a field has been set.
func (o *SiteCreate) HasDisabled() bool {
	if o != nil && !IsNil(o.Disabled) {
		return true
	}

	return false
}

// SetDisabled gets a reference to the given bool and assigns it to the Disabled field.
func (o *SiteCreate) SetDisabled(v bool) {
	o.Disabled = &v
}

// GetPrimaryDomain returns the PrimaryDomain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteCreate) GetPrimaryDomain() string {
	if o == nil || IsNil(o.PrimaryDomain.Get()) {
		var ret string
		return ret
	}
	return *o.PrimaryDomain.Get()
}

// GetPrimaryDomainOk returns a tuple with the PrimaryDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteCreate) GetPrimaryDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrimaryDomain.Get(), o.PrimaryDomain.IsSet()
}

// HasPrimaryDomain returns a boolean if a field has been set.
func (o *SiteCreate) HasPrimaryDomain() bool {
	if o != nil && o.PrimaryDomain.IsSet() {
		return true
	}

	return false
}

// SetPrimaryDomain gets a reference to the given NullableString and assigns it to the PrimaryDomain field.
func (o *SiteCreate) SetPrimaryDomain(v string) {
	o.PrimaryDomain.Set(&v)
}
// SetPrimaryDomainNil sets the value for PrimaryDomain to be an explicit nil
func (o *SiteCreate) SetPrimaryDomainNil() {
	o.PrimaryDomain.Set(nil)
}

// UnsetPrimaryDomain ensures that no value is present for PrimaryDomain, not even an explicit nil
func (o *SiteCreate) UnsetPrimaryDomain() {
	o.PrimaryDomain.Unset()
}

func (o SiteCreate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SiteCreate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if o.Ip4.IsSet() {
		toSerialize["ip4"] = o.Ip4.Get()
	}
	if o.Ip6.IsSet() {
		toSerialize["ip6"] = o.Ip6.Get()
	}
	toSerialize["domains"] = o.Domains
	toSerialize["routes"] = o.Routes
	if o.Cert.IsSet() {
		toSerialize["cert"] = o.Cert.Get()
	}
	if !IsNil(o.Redirect) {
		toSerialize["redirect"] = o.Redirect
	}
	if !IsNil(o.GenerateLe) {
		toSerialize["generate_le"] = o.GenerateLe
	}
	if !IsNil(o.LeHttpChallengeTokens) {
		toSerialize["le_http_challenge_tokens"] = o.LeHttpChallengeTokens
	}
	if !IsNil(o.Disabled) {
		toSerialize["disabled"] = o.Disabled
	}
	if o.PrimaryDomain.IsSet() {
		toSerialize["primary_domain"] = o.PrimaryDomain.Get()
	}
	return toSerialize, nil
}

type NullableSiteCreate struct {
	value *SiteCreate
	isSet bool
}

func (v NullableSiteCreate) Get() *SiteCreate {
	return v.value
}

func (v *NullableSiteCreate) Set(val *SiteCreate) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteCreate) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteCreate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteCreate(val *SiteCreate) *NullableSiteCreate {
	return &NullableSiteCreate{value: val, isSet: true}
}

func (v NullableSiteCreate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteCreate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


