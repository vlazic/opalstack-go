/*
Opalstack API

 ## The Opalstack JSON REST API  ### Authorization This API uses an **Authorization** header of the form: `\"Authorization: Token 1111111111111111111111111111111111111111\"`, where **1111111111111111111111111111111111111111** represents an API token created at https://my.opalstack.com/tokens/.  The typical format of an API request looks like the following: ``` GET request:     curl -s -H \"Authorization: Token 1111111111111111111111111111111111111111\" \"https://my.opalstack.com/api/v1/site/list/\" | jq .  POST request:     curl -s -H \"Content-Type: application/json\" -H \"Authorization: Token 1111111111111111111111111111111111111111\" \\             -X POST -d '[{\"id\": \"(site UUID)\", \"redirect\": true, ...}]' \"https://my.opalstack.com/api/v1/site/update/\" | jq . ``` (Further examples will omit **headers** and **jq** for the sake of clarity)  You can also authorize requests on our API Documentation page (https://my.opalstack.com/api/v1/doc/) in order to facilitate development. To do so, click the \"**Authorize**\" button on the right side of the page and enter \"**Token 1111111111111111111111111111111111111111**\" in the **Value** field within. Afterword, you will be able to perform requests directly from the documentation page. Be sure to logout when finished.  ### Embedding The Opalstack API supports _embedding_. This allows you to nest child API objects in a single GET request. For example, consider the following GET request performed with **curl**: ``` Request:     curl \"https://my.opalstack.com/api/v1/osuser/list/\"  Response:     [       {         \"id\": \"01010101-0202-0303-0404-050505050505\",         \"state\": \"READY\",         \"ready\": true,         \"name\": \"the_osuser_name\",         \"server\": \"11111111-1212-1313-1414-151515151515\"       }     ] ```  Suppose then that we would like additional information about the **server**. We _could_ proceed to query the **server** UUID (**11111111-1212-1313-1414-151515151515**) at the `/server/read/{uuid}` endpoint, like this: ``` Request:     curl \"https://my.opalstack.com/api/v1/server/read/11111111-1212-1313-1414-151515151515\"  Response:     {       \"id\": \"11111111-1212-1313-1414-151515151515\",       \"hostname\": \"vpsNNN.opalstack.com\"     } ```  However, we could have instead choosen to specify `?embed=server` as a query parameter to the original GET request. This will cause objects to be _embedded_ in the response directly: ``` Request:     curl \"https://my.opalstack.com/api/v1/osuser/list/?embed=server\"  Response:     [       {         \"id\": \"01010101-0202-0303-0404-050505050505\",         \"state\": \"READY\",         \"ready\": true,         \"name\": \"the_osuser_name\",         \"server\": {           \"id\": \"11111111-1212-1313-1414-151515151515\",           \"hostname\": \"vpsNNN.opalstack.com\"         }       }     ] ``` Here, the **server** field has been be populated with the full object instead of just a UUID.  The **embed** query parameter accepts multiple (comma-separated) fields to embed. For example: ``` curl \"https://my.opalstack.com/api/v1/account/info/?embed=web_servers,imap_servers,smtp_servers\" ``` 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package OpalStack

import (
	"encoding/json"
	"fmt"
)

// PsqlCharset the model 'PsqlCharset'
type PsqlCharset string

// List of PsqlCharset
const (
	PSQLCHARSET_UTF8 PsqlCharset = "utf8"
	PSQLCHARSET_EUC_CN PsqlCharset = "euc_cn"
	PSQLCHARSET_EUC_JIS_2004 PsqlCharset = "euc_jis_2004"
	PSQLCHARSET_EUC_JP PsqlCharset = "euc_jp"
	PSQLCHARSET_EUC_KR PsqlCharset = "euc_kr"
	PSQLCHARSET_EUC_TW PsqlCharset = "euc_tw"
	PSQLCHARSET_ISO_8859_5 PsqlCharset = "iso_8859_5"
	PSQLCHARSET_ISO_8859_6 PsqlCharset = "iso_8859_6"
	PSQLCHARSET_ISO_8859_7 PsqlCharset = "iso_8859_7"
	PSQLCHARSET_ISO_8859_8 PsqlCharset = "iso_8859_8"
	PSQLCHARSET_KOI8R PsqlCharset = "koi8r"
	PSQLCHARSET_KOI8U PsqlCharset = "koi8u"
	PSQLCHARSET_LATIN1 PsqlCharset = "latin1"
	PSQLCHARSET_LATIN2 PsqlCharset = "latin2"
	PSQLCHARSET_LATIN3 PsqlCharset = "latin3"
	PSQLCHARSET_LATIN4 PsqlCharset = "latin4"
	PSQLCHARSET_LATIN5 PsqlCharset = "latin5"
	PSQLCHARSET_LATIN6 PsqlCharset = "latin6"
	PSQLCHARSET_LATIN7 PsqlCharset = "latin7"
	PSQLCHARSET_LATIN8 PsqlCharset = "latin8"
	PSQLCHARSET_LATIN9 PsqlCharset = "latin9"
	PSQLCHARSET_LATIN10 PsqlCharset = "latin10"
	PSQLCHARSET_SQL_ASCII PsqlCharset = "sql_ascii"
	PSQLCHARSET_WIN866 PsqlCharset = "win866"
	PSQLCHARSET_WIN874 PsqlCharset = "win874"
	PSQLCHARSET_WIN1250 PsqlCharset = "win1250"
	PSQLCHARSET_WIN1251 PsqlCharset = "win1251"
	PSQLCHARSET_WIN1252 PsqlCharset = "win1252"
	PSQLCHARSET_WIN1253 PsqlCharset = "win1253"
	PSQLCHARSET_WIN1254 PsqlCharset = "win1254"
	PSQLCHARSET_WIN1255 PsqlCharset = "win1255"
	PSQLCHARSET_WIN1256 PsqlCharset = "win1256"
	PSQLCHARSET_WIN1257 PsqlCharset = "win1257"
	PSQLCHARSET_WIN1258 PsqlCharset = "win1258"
)

// All allowed values of PsqlCharset enum
var AllowedPsqlCharsetEnumValues = []PsqlCharset{
	"utf8",
	"euc_cn",
	"euc_jis_2004",
	"euc_jp",
	"euc_kr",
	"euc_tw",
	"iso_8859_5",
	"iso_8859_6",
	"iso_8859_7",
	"iso_8859_8",
	"koi8r",
	"koi8u",
	"latin1",
	"latin2",
	"latin3",
	"latin4",
	"latin5",
	"latin6",
	"latin7",
	"latin8",
	"latin9",
	"latin10",
	"sql_ascii",
	"win866",
	"win874",
	"win1250",
	"win1251",
	"win1252",
	"win1253",
	"win1254",
	"win1255",
	"win1256",
	"win1257",
	"win1258",
}

func (v *PsqlCharset) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PsqlCharset(value)
	for _, existing := range AllowedPsqlCharsetEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PsqlCharset", value)
}

// NewPsqlCharsetFromValue returns a pointer to a valid PsqlCharset
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPsqlCharsetFromValue(v string) (*PsqlCharset, error) {
	ev := PsqlCharset(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PsqlCharset: valid values are %v", v, AllowedPsqlCharsetEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PsqlCharset) IsValid() bool {
	for _, existing := range AllowedPsqlCharsetEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PsqlCharset value
func (v PsqlCharset) Ptr() *PsqlCharset {
	return &v
}

type NullablePsqlCharset struct {
	value *PsqlCharset
	isSet bool
}

func (v NullablePsqlCharset) Get() *PsqlCharset {
	return v.value
}

func (v *NullablePsqlCharset) Set(val *PsqlCharset) {
	v.value = val
	v.isSet = true
}

func (v NullablePsqlCharset) IsSet() bool {
	return v.isSet
}

func (v *NullablePsqlCharset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePsqlCharset(val *PsqlCharset) *NullablePsqlCharset {
	return &NullablePsqlCharset{value: val, isSet: true}
}

func (v NullablePsqlCharset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePsqlCharset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

