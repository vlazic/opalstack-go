/*
Opalstack API

 ## The Opalstack JSON REST API  ### Authorization This API uses an **Authorization** header of the form: `\"Authorization: Token 1111111111111111111111111111111111111111\"`, where **1111111111111111111111111111111111111111** represents an API token created at https://my.opalstack.com/tokens/.  The typical format of an API request looks like the following: ``` GET request:     curl -s -H \"Authorization: Token 1111111111111111111111111111111111111111\" \"https://my.opalstack.com/api/v1/site/list/\" | jq .  POST request:     curl -s -H \"Content-Type: application/json\" -H \"Authorization: Token 1111111111111111111111111111111111111111\" \\             -X POST -d '[{\"id\": \"(site UUID)\", \"redirect\": true, ...}]' \"https://my.opalstack.com/api/v1/site/update/\" | jq . ``` (Further examples will omit **headers** and **jq** for the sake of clarity)  You can also authorize requests on our API Documentation page (https://my.opalstack.com/api/v1/doc/) in order to facilitate development. To do so, click the \"**Authorize**\" button on the right side of the page and enter \"**Token 1111111111111111111111111111111111111111**\" in the **Value** field within. Afterword, you will be able to perform requests directly from the documentation page. Be sure to logout when finished.  ### Embedding The Opalstack API supports _embedding_. This allows you to nest child API objects in a single GET request. For example, consider the following GET request performed with **curl**: ``` Request:     curl \"https://my.opalstack.com/api/v1/osuser/list/\"  Response:     [       {         \"id\": \"01010101-0202-0303-0404-050505050505\",         \"state\": \"READY\",         \"ready\": true,         \"name\": \"the_osuser_name\",         \"server\": \"11111111-1212-1313-1414-151515151515\"       }     ] ```  Suppose then that we would like additional information about the **server**. We _could_ proceed to query the **server** UUID (**11111111-1212-1313-1414-151515151515**) at the `/server/read/{uuid}` endpoint, like this: ``` Request:     curl \"https://my.opalstack.com/api/v1/server/read/11111111-1212-1313-1414-151515151515\"  Response:     {       \"id\": \"11111111-1212-1313-1414-151515151515\",       \"hostname\": \"vpsNNN.opalstack.com\"     } ```  However, we could have instead choosen to specify `?embed=server` as a query parameter to the original GET request. This will cause objects to be _embedded_ in the response directly: ``` Request:     curl \"https://my.opalstack.com/api/v1/osuser/list/?embed=server\"  Response:     [       {         \"id\": \"01010101-0202-0303-0404-050505050505\",         \"state\": \"READY\",         \"ready\": true,         \"name\": \"the_osuser_name\",         \"server\": {           \"id\": \"11111111-1212-1313-1414-151515151515\",           \"hostname\": \"vpsNNN.opalstack.com\"         }       }     ] ``` Here, the **server** field has been be populated with the full object instead of just a UUID.  The **embed** query parameter accepts multiple (comma-separated) fields to embed. For example: ``` curl \"https://my.opalstack.com/api/v1/account/info/?embed=web_servers,imap_servers,smtp_servers\" ``` 

API version: 1.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package OpalStack

import (
	"encoding/json"
)

// checks if the CertUpdate type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertUpdate{}

// CertUpdate struct for CertUpdate
type CertUpdate struct {
	Id string `json:"id"`
	Name *string `json:"name,omitempty"`
	Cert *string `json:"cert,omitempty"`
	Intermediates NullableString `json:"intermediates,omitempty"`
	Key *string `json:"key,omitempty"`
}

// NewCertUpdate instantiates a new CertUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertUpdate(id string) *CertUpdate {
	this := CertUpdate{}
	this.Id = id
	return &this
}

// NewCertUpdateWithDefaults instantiates a new CertUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertUpdateWithDefaults() *CertUpdate {
	this := CertUpdate{}
	return &this
}

// GetId returns the Id field value
func (o *CertUpdate) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *CertUpdate) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *CertUpdate) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CertUpdate) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertUpdate) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CertUpdate) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CertUpdate) SetName(v string) {
	o.Name = &v
}

// GetCert returns the Cert field value if set, zero value otherwise.
func (o *CertUpdate) GetCert() string {
	if o == nil || IsNil(o.Cert) {
		var ret string
		return ret
	}
	return *o.Cert
}

// GetCertOk returns a tuple with the Cert field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertUpdate) GetCertOk() (*string, bool) {
	if o == nil || IsNil(o.Cert) {
		return nil, false
	}
	return o.Cert, true
}

// HasCert returns a boolean if a field has been set.
func (o *CertUpdate) HasCert() bool {
	if o != nil && !IsNil(o.Cert) {
		return true
	}

	return false
}

// SetCert gets a reference to the given string and assigns it to the Cert field.
func (o *CertUpdate) SetCert(v string) {
	o.Cert = &v
}

// GetIntermediates returns the Intermediates field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CertUpdate) GetIntermediates() string {
	if o == nil || IsNil(o.Intermediates.Get()) {
		var ret string
		return ret
	}
	return *o.Intermediates.Get()
}

// GetIntermediatesOk returns a tuple with the Intermediates field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CertUpdate) GetIntermediatesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Intermediates.Get(), o.Intermediates.IsSet()
}

// HasIntermediates returns a boolean if a field has been set.
func (o *CertUpdate) HasIntermediates() bool {
	if o != nil && o.Intermediates.IsSet() {
		return true
	}

	return false
}

// SetIntermediates gets a reference to the given NullableString and assigns it to the Intermediates field.
func (o *CertUpdate) SetIntermediates(v string) {
	o.Intermediates.Set(&v)
}
// SetIntermediatesNil sets the value for Intermediates to be an explicit nil
func (o *CertUpdate) SetIntermediatesNil() {
	o.Intermediates.Set(nil)
}

// UnsetIntermediates ensures that no value is present for Intermediates, not even an explicit nil
func (o *CertUpdate) UnsetIntermediates() {
	o.Intermediates.Unset()
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *CertUpdate) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertUpdate) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *CertUpdate) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *CertUpdate) SetKey(v string) {
	o.Key = &v
}

func (o CertUpdate) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertUpdate) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Cert) {
		toSerialize["cert"] = o.Cert
	}
	if o.Intermediates.IsSet() {
		toSerialize["intermediates"] = o.Intermediates.Get()
	}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	return toSerialize, nil
}

type NullableCertUpdate struct {
	value *CertUpdate
	isSet bool
}

func (v NullableCertUpdate) Get() *CertUpdate {
	return v.value
}

func (v *NullableCertUpdate) Set(val *CertUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableCertUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableCertUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertUpdate(val *CertUpdate) *NullableCertUpdate {
	return &NullableCertUpdate{value: val, isSet: true}
}

func (v NullableCertUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


